{"name":"Mynote","tagline":"记录下一些东西","body":"mynote\r\n======\r\n\r\n记录下一些东西\r\n\r\n\r\njar封装成windows-serivce\r\n - 方式一： http://wrapper.tanukisoftware.com/doc/english/download.jsp 有免费版\r\n   +  没有使用过。\r\n - 方式二： http://commons.apache.org/proper/commons-daemon/ 开源TOMCAT就是用这个做\r\n   + 最近试了试，（比较二。没有以管理员进行命令操作） window其实非常好配置，先//IS//添加一个服务 ，直接点开manage的exe（需要重新命名为和服务一样的名字才可以打开不然会提示的没安装服务的）就可进行GUI设置了。\r\n \r\n ---我来测试提交1：--别人修改了 - 提交给我，--我又也改过了。这里自己的话哦\r\n\r\n\r\n我来测试提交1：别人修改了 提交给我，我又也改过了。---李泉阿斯顿发射点法防啊手动阀地方是学习学习\r\n\r\n\r\n\r\n \r\n```java\r\npackage cn.com.pengyue.util;\r\n\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.ContainerEvent;\r\nimport java.awt.event.ContainerListener;\r\nimport java.awt.event.WindowEvent;\r\nimport java.awt.event.WindowListener;\r\nimport java.lang.reflect.InvocationHandler;\r\nimport java.lang.reflect.Method;\r\nimport java.lang.reflect.Proxy;\r\nimport java.util.Arrays;\r\nimport java.util.Hashtable;\r\nimport java.util.Map;\r\n\r\nimport javax.swing.JFrame;\r\n\r\npublic final class Delegate implements InvocationHandler{\r\n\t\r\n\tprivate Object[] args;\r\n\tprivate Object realObj;\r\n\tprivate String delegateMethodName;\r\n\tprivate String realMethodName;\r\n\tprivate Class<?> delegateInterface;\r\n\tprivate Class<?> realClass;\r\n\tprivate Map<Method,Method> methodMap;\r\n\tprivate Method[] realMethods;\r\n\tprivate boolean appendArgs;\r\n\tprivate Class[] argsTypes; \r\n\tprivate Delegate(Object[] args, Object realObj, String delegateMethodName,\r\n\t\t\tString realMethodName, Class<?> delegateInterface,\r\n\t\t\tClass<?> realClass) {\r\n\t\tsuper();\r\n\t\tthis.args = args;\r\n\t\tthis.realObj = realObj;\r\n\t\tthis.delegateMethodName = delegateMethodName;\r\n\t\tthis.realMethodName = realMethodName;\r\n\t\tthis.delegateInterface = delegateInterface;\r\n\t\tthis.realClass = realClass;\r\n\t\tthis.methodMap = new Hashtable<Method, Method>();\r\n\t}\r\n\t\r\n\tpublic static <T> T $(Object hasMethodObj,String methodName,String delegateMethodName,Class<T> cls,Object... args){\r\n\t\tDelegate h = new Delegate(args,hasMethodObj,delegateMethodName,methodName,cls,hasMethodObj.getClass());\r\n\t\tif(delegateMethodName==null){\r\n\t\t\tMethod[] ms = h.delegateInterface.getDeclaredMethods();\r\n\t\t\tif(ms.length==1){\r\n\t\t\t\th.delegateMethodName = ms[0].getName();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(args!=null && args.length> 0){\r\n\t\t\th.appendArgs = true;\r\n\t\t\tif(methodName==null){\r\n\t\t\t\th.argsTypes = new Class[args.length];\r\n\t\t\t\tfor (int i = 0; i < args.length; i++) {\r\n\t\t\t\t\th.argsTypes[i] = args[i].getClass();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (T)Proxy.newProxyInstance(h.realClass.getClassLoader(), new Class[]{cls}, h);\r\n\t}\r\n\t\r\n\tpublic static <T> T $(Object hasMethodObj,String methodName,Class<T> cls,Object... args){\r\n\t\treturn $(hasMethodObj, methodName, null ,cls,args);\r\n\t}\r\n\t\r\n\tpublic static <T> T $(Object hasMethodObj,Class<T> cls,Object... args){\r\n\t\treturn $(hasMethodObj, null,null ,cls, args);\r\n\t}\r\n\r\n\r\n\t@Override\r\n\tpublic Object invoke(Object proxy, Method method, Object[] args)\r\n\t\t\tthrows Throwable {\r\n\t\t//不是接口定义的方法 代理处理类执行。\r\n\t\tif(!method.getDeclaringClass().equals(this.delegateInterface)){\r\n\t\t\treturn method.invoke(this, args);\r\n\t\t}\r\n\t\targs = magreArgs(args);\r\n\t\tClass<?>[] parameterTypes = magreParamterTypes(method.getParameterTypes());\r\n\t\tMethod realMethod = method;\r\n\t\tif(delegateMethodName!=null && !method.getName().equals(delegateMethodName)){//不是要进行委托\r\n\t\t\treturn returnDefaultVal(method);\r\n\t\t}\r\n\t\t//没说明 委托到接口的什么方法 则从调用者参试寻找符合接口参数和返回值定义的方法\r\n\t\t//存的搜索结果里找下，找到用存好的。\r\n\t\trealMethod = methodMap.get(method);\r\n\t\tif(realMethod==null){\r\n\t\t\trealMethod = searchMethodByParams(parameterTypes);\r\n\t\t\tif(realMethod==null){\r\n\t\t\t\treturn returnDefaultVal(method);\r\n\t\t\t}\r\n\t\t\tmethod.setAccessible(true);\r\n\t\t\t//缓存下来\r\n\t\t\tmethodMap.put(method, realMethod);\r\n\t\t}\r\n\t\targs = checkArgs(args, realMethod.getParameterTypes(),method);\r\n\t\treturn realMethod.invoke(realObj, args);\r\n\t}\r\n\t\r\n\t//检测 参数数量， 不够用默认值补齐,多了截断参数\r\n\tprivate Object[] checkArgs(Object[] args, Class<?>[] parameterTypes,Method method) {\r\n\t\tif(parameterTypes.length!=args.length){\r\n\t\t\tObject[] newArgs = new Object[parameterTypes.length];\r\n\t\t\tSystem.arraycopy(args, 0, newArgs, 0, args.length);\r\n\t\t\tfor (int i = args.length; i < newArgs.length; i++) {\r\n\t\t\t\tif(i==args.length && parameterTypes[i].equals(Method.class)){\r\n\t\t\t\t\tnewArgs[i] = method;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tnewArgs[i] = returnDefaultVal(parameterTypes[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\targs=newArgs;\r\n\t\t}\r\n\t\treturn args;\r\n\t}\r\n\r\n\r\n\tprivate Object returnDefaultVal(Class<?> returnType) {\r\n\t\t//默认返回 \r\n\t\tif(returnType.isPrimitive() && !returnType.equals(Void.TYPE)){\r\n\t\t\tif(returnType.equals(boolean.class)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\tprivate Object returnDefaultVal(Method method) {\r\n\t\treturn returnDefaultVal(method.getReturnType());\r\n\t}\r\n\r\n\tprivate Method searchMethodByParams(Class<?>[] parameterTypes) {\r\n\t\tboolean useNameSearch = false;\r\n\t\tif(this.realMethodName!=null){\r\n\t\t\ttry {\r\n\t\t\t\treturn realClass.getDeclaredMethod(this.realMethodName, parameterTypes);\r\n\t\t\t} catch (SecurityException e) {} catch (NoSuchMethodException e) {}\r\n\t\t\tuseNameSearch = true;\r\n\t\t}\r\n\t\tif(this.realMethods==null){\r\n\t\t\tthis.realMethods = realClass.getDeclaredMethods();\r\n\t\t}\r\n\t\tfor (Method realMethod : realMethods) {\r\n\t\t\tif(useNameSearch){\r\n\t\t\t\tif(realMethod.getName().equals(realMethodName)){\r\n\t\t\t\t\treturn realMethod;\r\n\t\t\t\t}\r\n\t\t\t}else if(isFirstSubArray(parameterTypes, realMethod.getParameterTypes())\r\n\t\t\t\t\t|| isFirstSubArray(parameterTypes, realMethod.getParameterTypes())\r\n//\t\t\t\t&& Modifier.isPublic(realMethod.getModifiers())\r\n\t\t\t){\r\n\t\t\t\treturn realMethod;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t//特殊比较方法， 以第二参数 @param{ realParameterTypes } 只要第一参数是其中的前一段 完全匹配就认为一样的\r\n\tprivate static boolean isFirstSubArray(Class[] methodParameterTypes, Class[] realParameterTypes) {\r\n        if (methodParameterTypes==realParameterTypes)\r\n            return true;\r\n\r\n        int length = methodParameterTypes.length;\r\n        if(realParameterTypes.length<length)return false;\r\n        \r\n        for (int i=0; i<length; i++) {\r\n        \tClass p1 = methodParameterTypes[i];\r\n        \tClass p2 = realParameterTypes[i];\r\n            if (!(p1==null ? p2==null : p1.equals(p2)))\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\tprivate Object[] magreArgs(Object[] args) {\r\n\t\tif(this.appendArgs){\r\n\t\t\tif(args==null || args.length==0){\r\n\t\t\t\targs = this.args;\r\n\t\t\t}else{\r\n\t\t\t\tObject[] newArgs = new Object[args.length+this.args.length];\r\n\t\t\t\tSystem.arraycopy(args, 0, newArgs, 0, args.length);\r\n\t\t\t\tSystem.arraycopy(this.args, 0, newArgs, args.length, this.args.length);\r\n\t\t\t\targs = newArgs;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn args;\r\n\t}\r\n\t\r\n\tprivate Class<?>[] magreParamterTypes(Class<?>[] parameterTypes) {\r\n\t\tif(this.argsTypes!=null && this.argsTypes.length>0){\r\n\t\t\tif(parameterTypes==null || parameterTypes.length==0){\r\n\t\t\t\tparameterTypes = this.argsTypes;\r\n\t\t\t}else{\r\n\t\t\t\tClass<?>[] newTypes = new Class[parameterTypes.length+this.argsTypes.length];\r\n\t\t\t\tSystem.arraycopy(parameterTypes, 0, newTypes, 0, parameterTypes.length);\r\n\t\t\t\tSystem.arraycopy(this.argsTypes, 0, newTypes, parameterTypes.length, this.argsTypes.length);\r\n\t\t\t\tparameterTypes = newTypes;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn parameterTypes;\r\n\t}\r\n\t\r\n\tprotected final static synchronized void test(){}\r\n\t\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn \"[委托]\"+(delegateMethodName==null?\"自动匹配\":delegateMethodName)+\" 实现：\"+ this.realObj.toString();\r\n\t}\r\n\t\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}